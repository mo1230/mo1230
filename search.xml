<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>记录一次练手小项目--历史上的今天</title>
      <link href="/2020/03/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BB%83%E6%89%8B%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E4%BB%8A%E5%A4%A9/"/>
      <url>/2020/03/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BB%83%E6%89%8B%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E4%BB%8A%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<p>最近在b站上找到一个安卓的<a href="https://www.bilibili.com/video/av75746261?p=1" target="_blank" rel="noopener">练手小项目–历史上的今天</a>,这个小项目用到了一些框架以及一些实用的技巧，对于新手来说很有学习意义。在这里谢谢这位作者的付出。（这个作者应该是个小姐姐^0^）</p><blockquote><p>这里是项目中的一些重要的知识点：</p><ol><li>聚合数据API的使用</li><li>xutils框架的使用</li><li>gson框架的使用</li><li>picasso框架的使用</li><li>drawable资源的编写</li><li>TextView布局为线条的技巧</li><li>LinearLayout中百分比布局的方法</li><li>日历对话框的使用</li></ol></blockquote><h2 id="聚合数据API的使用"><a href="#聚合数据API的使用" class="headerlink" title="聚合数据API的使用"></a>聚合数据API的使用</h2><p><a href="https://www.juhe.cn/?" target="_blank" rel="noopener">聚合数据</a>，这个网站中有各种各样的API可以供开发者使用，有收费的也有免费的。这次用到的是两个免费的API：历史上的今天、老黄历。申请了免费API之后，点进去会有API文档以及API测试工具，就可以知道有几个可以使用的API。选择要使用的API然后点击API测试工具，可以进行测试，从而得到相应的返回数据。这个返回数据我们后面要使用它来编写相应的数据类（使用一个插件可以直接生成，后面介绍）<br><img src="/2020/03/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BB%83%E6%89%8B%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E4%BB%8A%E5%A4%A9/today.png" alt="历史上的今天API"><br><img src="/2020/03/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BB%83%E6%89%8B%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E4%BB%8A%E5%A4%A9/data.png" alt="通过API测试工具得到的返回数据"></p><ul><li>从返回数据得到相应的数据类：<ol><li>安装gsonformat插件<br><img src="/2020/03/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BB%83%E6%89%8B%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E4%BB%8A%E5%A4%A9/gsonformat.png" alt></li><li>新建一个HistoryBean类</li><li>在这个类文件中鼠标右键点击Generate，选择Gsonformat,然后将得到的返回数据赋值粘贴到插件中，点击确定，就生成了数据类<br><img src="/2020/03/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BB%83%E6%89%8B%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E4%BB%8A%E5%A4%A9/databean.png" alt="Gsonformat"></li></ol></li></ul><h2 id="xutils框架、gson框架、picasso框架"><a href="#xutils框架、gson框架、picasso框架" class="headerlink" title="xutils框架、gson框架、picasso框架"></a>xutils框架、gson框架、picasso框架</h2><p>这三个框架的具体使用我会再写几篇文章来讲解，这里只讲解这三个框架在这个项目中的总体作用。xutils框架可以发送网络请求，gson框架用来解析数据格式，picasso框架是加载网络图片的框架。<br><img src="/2020/03/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BB%83%E6%89%8B%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E4%BB%8A%E5%A4%A9/kuangjia.png" alt="三个框架的主体作用"></p><h2 id="drawable资源的编写"><a href="#drawable资源的编写" class="headerlink" title="drawable资源的编写"></a>drawable资源的编写</h2><p>drawable也就是绘制(画画)。在为布局设置一些特殊的背景或者让布局形状为特殊形状时可以编写一个drawable资源。<br><a href="https://www.cnblogs.com/Jeely/p/11045042.html" target="_blank" rel="noopener">这里有一篇别人的博客，写的比较详细</a><br>在这次的项目中，有一些ViewGroup的背景就是通过绘制添加进去的，比如图片按钮的背景形状<br><img src="/2020/03/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BB%83%E6%89%8B%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E4%BB%8A%E5%A4%A9/drawable.png" alt></p><h2 id="TextView布局为线条的技巧"><a href="#TextView布局为线条的技巧" class="headerlink" title="TextView布局为线条的技巧"></a>TextView布局为线条的技巧</h2><p>有时候我们需要一个线条来实现分割效果，可以通过使用一个线条的图片来实现，但是这样太过麻烦。可以直接用TextView将它的宽度或者高度设置为1dp，背景设置为相应的颜色，这样就可以实现一个线条的效果。</p><p><img src="/2020/03/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BB%83%E6%89%8B%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E4%BB%8A%E5%A4%A9/textview.png" alt="使用TextView做线条"></p><h2 id="LinearLayout中百分比布局的方法"><a href="#LinearLayout中百分比布局的方法" class="headerlink" title="LinearLayout中百分比布局的方法"></a>LinearLayout中百分比布局的方法</h2><p>在LinearLayout中可以通过设置layout_weight以及调整相应的layout_width或layout_height为0来调整部件在布局中的比例大小。<br><img src="/2020/03/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BB%83%E6%89%8B%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E4%BB%8A%E5%A4%A9/bili.png" alt></p><h2 id="日历对话框的使用"><a href="#日历对话框的使用" class="headerlink" title="日历对话框的使用"></a>日历对话框的使用</h2><p>DatePickerDialog类所对应的是Android自带的日历对话框<br><img src="/2020/03/05/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E7%BB%83%E6%89%8B%E5%B0%8F%E9%A1%B9%E7%9B%AE-%E5%8E%86%E5%8F%B2%E4%B8%8A%E7%9A%84%E4%BB%8A%E5%A4%A9/rilidialog.png" alt></p><p>对了，这次的项目我会对其进行优化，因为我跟着这个b站小姐姐做的只是一个简单版的，界面也不是特别好看。这两天我会使用一些其他部件，将界面美化一下并且再仔细学习一下xutils、gson、picasso框架的使用。</p><p>祝好</p>]]></content>
      
      
      <categories>
          
          <category> 移动端开发 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 历史上的今天 </tag>
            
            <tag> xutils </tag>
            
            <tag> gson </tag>
            
            <tag> picasso </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发之RecyclerView创建列表</title>
      <link href="/2020/03/02/Android%E5%BC%80%E5%8F%91%E4%B9%8BRecyclerView%E5%88%9B%E5%BB%BA%E5%88%97%E8%A1%A8/"/>
      <url>/2020/03/02/Android%E5%BC%80%E5%8F%91%E4%B9%8BRecyclerView%E5%88%9B%E5%BB%BA%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>RecyclerView控件可以用于创建各种类型的列表，比如横向的、竖向的、还有网格的。<br>RecyclerView的具体类型通过设定其布局管理器来决定</p><blockquote><p>LinearLayoutManager 现行管理器，支持横向、纵向。<br>GridLayoutManager 网格布局管理器<br>StaggeredGridLayoutManager 瀑布就式布局管理器</p></blockquote><p>下面讲讲它的用法。<br>这个控件可以创建列表，所以你需要自己建一个列表中每一项的布局文件，告诉它列表的每一项长什么样子；然后列表肯定需要往那个项布局文件存数据，所以需要一个数据源，比如一个 List<Intager> list ，list中是对应列表各项的数据；最后需要一个适配器，这个适配器用来将数据源和项布局对应关联起来，告诉RecyclerView数据应该怎么放。</p><blockquote><p>ReyclerView需要：<br>1 数据源    要放在列表中的所有数据<br>2 适配器    将数据传入适配器，把数据与项布局对应绑定，所以在适配器类内部需要使用数据源以及项布局</p></blockquote><h2 id="创建项布局文件"><a href="#创建项布局文件" class="headerlink" title="创建项布局文件"></a>创建项布局文件</h2><p>我要往列表中放图片，所以项布局中要有一个ImageView<br>你的根据需要进行布局</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    android:layout_width=&quot;match_parent&quot; android:layout_height=&quot;match_parent&quot;&gt;&lt;ImageView    android:id=&quot;@+id/images&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    /&gt;&lt;/FrameLayout&gt;</code></pre><h2 id="创建数据源"><a href="#创建数据源" class="headerlink" title="创建数据源"></a>创建数据源</h2><p>因为我要往列表中放图片，所以我的数据源存放的是图片的id所以是Integer类型，你根据自己的需要进行填写</p><pre><code class="//">    private List&lt;Integer&gt; imagePath;</code></pre><h2 id="创建适配器"><a href="#创建适配器" class="headerlink" title="创建适配器"></a>创建适配器</h2><p>下面是我自己定义的一个适配器类，RecyclerView的适配器需要继承于RecyclerView.Adapter&lt;&gt;类，这是个模板类，其尖括号里需要是一个ViewHolder，这个ViewHolder在适配器类内定义，ViewHolder内的属性对于项布局中的各个控件。</p><blockquote><p>讲一下怎么在IDE中更便捷的创建适配器类，不要直接复制粘贴下面的内容，先创建自己的适配器，然后用ide把需要override的方法弄出来，在弄那个ViewHolder，然后再对照下面的内容将自己的适配器弄完整—————-因为这个确实有些复杂，所以要用的时候先把这个类的框架弄好，再对照着下面改吧。</p></blockquote><pre><code class="class">        // 下面这个类用于承接列表的项布局中的控件        public class ViewHolders extends RecyclerView.ViewHolder{            private ImageView imageView;                    // 因为我的项布局中只放了一个ImageView，所以这里只有这个，                                                            // 如果你的项布局中有其他的，要在这里写出来作为ViewHold的属性            public ViewHolders(@NonNull View itemView) {                super(itemView);                this.imageView = itemView.findViewById(R.id.images);            }        }        // 适配器属性        private List&lt;Integer&gt; paths;        // 数据源        private ViewHolders viewHolders;    // 项布局中的每个控件        // 将数据传进来        public DataAdapter(List&lt;Integer&gt; dataList) {            this.paths = dataList;        }// 下面这个方法将项布局与ViewHolder关联起来        @NonNull        @Override        public ViewHolders onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {            View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.items, null);            this.viewHolders = new ViewHolders(view);            return this.viewHolders;        }// 下面这个方法设置项布局中的控件的数据        @Override        public void onBindViewHolder(@NonNull ViewHolders holder, int position) {            this.viewHolders.imageView.setImageResource(this.paths.get(position));        }        @Override        public int getItemCount() {            return this.paths.size();        }    }</code></pre><h2 id="给数据源添加具体数据、设置RecyclerView的具体类型、给RecyclerView设置适配器"><a href="#给数据源添加具体数据、设置RecyclerView的具体类型、给RecyclerView设置适配器" class="headerlink" title="给数据源添加具体数据、设置RecyclerView的具体类型、给RecyclerView设置适配器"></a>给数据源添加具体数据、设置RecyclerView的具体类型、给RecyclerView设置适配器</h2><pre><code>        this.recyclerView = this.view.findViewById(R.id.list);      // RecyclerView        this.imagePath = new ArrayList&lt;&gt;();                         // 实例化数据源        this.imagePath.add(R.drawable.me);        this.imagePath.add(R.drawable.avatar);                      // 给数据源添加具体数据        this.dataAdapter = new DataAdapter(this.imagePath);         // 实例化适配器，将数据源传进去        LinearLayoutManager linearLayoutManager = new LinearLayoutManager(getContext());        // 线性布局管理器，默认纵向        this.recyclerView.setLayoutManager(linearLayoutManager);                                // 设置RecyclerView的类型        this.recyclerView.setAdapter(this.dataAdapter);                                         // 设置适配器</code></pre><h2 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h2><p>ok了</p>]]></content>
      
      
      <categories>
          
          <category> 移动端开发 </category>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RecylerView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随心之言</title>
      <link href="/2020/02/29/%E9%9A%8F%E5%BF%83%E4%B9%8B%E8%A8%80/"/>
      <url>/2020/02/29/%E9%9A%8F%E5%BF%83%E4%B9%8B%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<p>如今的我算是一个落魄之人，本科的专业不是自己喜欢的，大学四年兜兜转转自己学了一些编程的一些东西，但是如今恐怕也尚未摸到合格线。现在刚刚毕业，还没有找工作，参加了考研大军，考软件工程。<br>初试成绩308分，不算高，自己作为一个跨专业的考生心里总归是有些许恐慌。如今发生了疫情，所有人都被困在家，对我而言算得上是一件幸事，多给了我一些时间去学习。不论是考研复试，还是参加工作，都多了一些时间。<br>对于计算机软件技术，我原本心里挺抗拒Java，觉得太普遍。因其尚优，才可普之。是我的想法错了。作为一个喜欢软件开发的人，不应该去抗拒其相关技术，应该多去了解。</p><p>祝好。</p>]]></content>
      
      
      <categories>
          
          <category> 静心之处 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/02/28/hello-world/"/>
      <url>/2020/02/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
